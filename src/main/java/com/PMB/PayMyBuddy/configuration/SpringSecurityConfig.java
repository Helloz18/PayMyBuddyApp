package com.PMB.PayMyBuddy.configuration;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private DataSource dataSource; 

	/**
	 * AuthenticationManagerBuilder is a class that handle the authentication ruleset
	 * @param auth
	 * @throws Exception
	 * a query is used to check the username and his role. Spring Security demands
	 * the id to be named "username"
	 */
	@Autowired
	public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication()
			.dataSource(dataSource)
			.passwordEncoder(new BCryptPasswordEncoder())
			.usersByUsernameQuery("select u.email as username, u.password, u.enabled from \"PayMyBuddy\".user u where u.email=?")
			.authoritiesByUsernameQuery("select u.email as username, u.role as role from \"PayMyBuddy\".user u where u.email=?");
	}

	/**
	 * Filters
	 * The HTTP requests will be processed through the filter chain
	 * By default, a login form is generated by the formLogin() method
	 */
	@Override
	public void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
			.antMatchers("/").hasAnyRole("USER", "ADMIN")
			.antMatchers("/admin/").hasRole("ADMIN")
			.anyRequest()
			.authenticated()
			.and()
			.httpBasic()
			.and()
			.formLogin();
	}
	
//	 @Override
//	    protected void configure(HttpSecurity http) throws Exception {
//	        http.authorizeRequests()
//	          .antMatchers("/private/**")
//	          .authenticated()
//	          .antMatchers("/public/**")
//	          .permitAll()
//	          .and()
//	          .httpBasic();
//	    }

}
